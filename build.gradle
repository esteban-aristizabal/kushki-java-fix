import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        maven {
            url 'http://dl.bintray.com/cjstehno/public'
        }
    }
    dependencies {
        classpath 'com.github.townsfolk:gradle-release:1.2'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.7'
}

group 'com.kushkipagos'
version '1.3.-alpha-0'

apply from: 'deploy.gradle'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'release'
apply plugin: 'pmd'
apply plugin: 'findbugs'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

configurations {
    unitTestCompile.extendsFrom testCompile
    unitTestRumtime.extendsFrom testRuntime

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.22.1',
            'com.googlecode.json-simple:json-simple:1.1.1',
            'org.glassfish.jersey.core:jersey-client:2.22.2',
            'com.mashape.unirest:unirest-java:1.4.9',
             'com.github.townsfolk:gradle-release:1.2'


    testCompile 'junit:junit:4.11',
            'org.apache.commons:commons-lang3:3.4',
            'org.hamcrest:hamcrest-all:1.3',
            'org.mockito:mockito-all:2.0.2-beta',
            'com.googlecode.json-simple:json-simple:1.1.1',
            'org.skyscreamer:jsonassert:1.5.0'
    'pl.pragmatists:JUnitParams:1.0.4'
}

task printVersion {
    println project.version
}

task unitTest(type: Test) {
    include 'com/kushkipagos/unit/**'
}

task integrationTest(type: Test) {
    include 'com/kushkipagos/integration/**'
}

pmd {
    targetJdk = '1.7'
    toolVersion = '4.3'
}

project.ext.pmdRuleSets = [
        'basic',
        'braces',
        'clone',
        'codesize',
        'logging-java',
        'migrating',
        'strictexception',
        'typeresolution',
        'unusedcode',
]

pmdMain {
    ruleSets = pmdRuleSets + ['coupling', 'imports', 'strings']
    ruleSetFiles = files('config/pmd/pmd.xml')
}

pmdTest {
    ruleSets = pmdRuleSets
    ruleSetFiles = files('config/pmd/pmd.xml')
}

findbugs {
    toolVersion = '3.0.0'
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    outputs.upToDateWhen { false }
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR, TestLogEvent.STANDARD_OUT
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

javadoc {
    options.overview = 'src/main/java/overview.html'
}
